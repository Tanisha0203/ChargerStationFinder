{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"map-container\",\n  ref: \"mapContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\HARSH\\Desktop\\code\\frontend\\src\\views\\Map.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\" ref=\"mapContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted, computed } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport L from 'leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\n\r\nexport default {\r\n  name: 'Map',\r\n  setup() {\r\n    const store = useStore()\r\n    const mapContainer = ref(null)\r\n    const map = ref(null)\r\n    const markers = ref([])\r\n    \r\n    const chargers = computed(() => store.getters.getChargers)\r\n\r\n    const initMap = () => {\r\n      if (!mapContainer.value) return\r\n\r\n      // Initialize map\r\n      map.value = L.map(mapContainer.value).setView([0, 0], 2)\r\n\r\n      // Add tile layer\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Â© OpenStreetMap contributors'\r\n      }).addTo(map.value)\r\n\r\n      // Add markers for each charger\r\n      markers.value = chargers.value.map(charger => {\r\n        const marker = L.marker([charger.location.latitude, charger.location.longitude])\r\n          .addTo(map.value)\r\n          .bindPopup(`\r\n            <h3>${charger.name}</h3>\r\n            <p><strong>Status:</strong> ${charger.status}</p>\r\n            <p><strong>Power Output:</strong> ${charger.powerOutput} kW</p>\r\n            <p><strong>Connector Type:</strong> ${charger.connectorType}</p>\r\n          `)\r\n        return marker\r\n      })\r\n\r\n      // Fit map bounds to show all markers\r\n      if (markers.value.length > 0) {\r\n        const group = new L.featureGroup(markers.value)\r\n        map.value.fitBounds(group.getBounds().pad(0.1))\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n      await store.dispatch('fetchChargers')\r\n      initMap()\r\n    })\r\n\r\n    onUnmounted(() => {\r\n      if (map.value) {\r\n        map.value.remove()\r\n      }\r\n    })\r\n\r\n    return {\r\n      mapContainer\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  height: calc(100vh - 64px);\r\n  width: 100%;\r\n}\r\n</style> "],"mappings":";;EACO,SAAM,eAAe;EAACA,GAAG,EAAC;;;uBAA/BC,mBAAA,CAAoD,OAApDC,UAAoD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}